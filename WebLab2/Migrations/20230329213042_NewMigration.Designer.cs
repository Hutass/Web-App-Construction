// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebLab2.Models;

#nullable disable

namespace WebLab2.Migrations
{
    [DbContext(typeof(TestBaseDbContext))]
    [Migration("20230329213042_NewMigration")]
    partial class NewMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebLab2.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Cost")
                        .HasColumnType("float");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    b.Property<string>("Text")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer", (string)null);
                });

            modelBuilder.Entity("WebLab2.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Mail")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength();

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength();

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<int?>("RightsId")
                        .HasColumnType("int")
                        .HasColumnName("RightsID");

                    b.Property<string>("Surname")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("RightsId");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("WebLab2.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("TestID");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("TypeId");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("WebLab2.Models.QuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("QuestionType", (string)null);
                });

            modelBuilder.Entity("WebLab2.Models.Right", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Rights");
                });

            modelBuilder.Entity("WebLab2.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Test", (string)null);
                });

            modelBuilder.Entity("WebLab2.Models.TestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PersonID");

                    b.Property<double?>("Score")
                        .HasColumnType("float");

                    b.Property<int?>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("TestID");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("TestId");

                    b.ToTable("TestResult", (string)null);
                });

            modelBuilder.Entity("WebLab2.Models.TestResultStat", b =>
                {
                    b.Property<int?>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("AnswerID");

                    b.Property<int?>("TestResultId")
                        .HasColumnType("int")
                        .HasColumnName("TestResultID");

                    b.HasIndex("AnswerId");

                    b.HasIndex("TestResultId");

                    b.ToTable("TestResultStat", (string)null);
                });

            modelBuilder.Entity("WebLab2.Models.Answer", b =>
                {
                    b.HasOne("WebLab2.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_Answer_Question");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("WebLab2.Models.Person", b =>
                {
                    b.HasOne("WebLab2.Models.Right", "Rights")
                        .WithMany("People")
                        .HasForeignKey("RightsId")
                        .HasConstraintName("FK_Person_Rights");

                    b.Navigation("Rights");
                });

            modelBuilder.Entity("WebLab2.Models.Question", b =>
                {
                    b.HasOne("WebLab2.Models.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .HasConstraintName("FK_Question_Test");

                    b.HasOne("WebLab2.Models.QuestionType", "Type")
                        .WithMany("Questions")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_Question_QuestionType");

                    b.Navigation("Test");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("WebLab2.Models.TestResult", b =>
                {
                    b.HasOne("WebLab2.Models.Person", "Person")
                        .WithMany("TestResults")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_TestResult_Person");

                    b.HasOne("WebLab2.Models.Test", "Test")
                        .WithMany("TestResults")
                        .HasForeignKey("TestId")
                        .HasConstraintName("FK_TestResult_Test");

                    b.Navigation("Person");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("WebLab2.Models.TestResultStat", b =>
                {
                    b.HasOne("WebLab2.Models.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .HasConstraintName("FK_TestResultStat_Answer");

                    b.HasOne("WebLab2.Models.TestResult", "TestResult")
                        .WithMany()
                        .HasForeignKey("TestResultId")
                        .HasConstraintName("FK_TestResultStat_TestResult");

                    b.Navigation("Answer");

                    b.Navigation("TestResult");
                });

            modelBuilder.Entity("WebLab2.Models.Person", b =>
                {
                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("WebLab2.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("WebLab2.Models.QuestionType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("WebLab2.Models.Right", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("WebLab2.Models.Test", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("TestResults");
                });
#pragma warning restore 612, 618
        }
    }
}
